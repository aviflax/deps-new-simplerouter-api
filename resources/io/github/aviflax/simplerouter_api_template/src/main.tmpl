(ns {{top/ns}}.{{main/ns}}
  (:require
    [clojure.data.json :as json]
    [next.jdbc :as jdbc]
    [clj-simple-router.core :as router]
    [ring.adapter.jetty :refer [run-jetty]]
    [ring.middleware.defaults :refer [api-defaults wrap-defaults]])
  (:gen-class))


(defonce db-datasource (atom nil))


(defn is-db-up?
  []
  (boolean (jdbc/execute! @db-datasource ["SELECT"])))


(def routes
  {"GET /healthz"  (fn [_req]
                     (let [db-up? (is-db-up?)]
                       {:status (if db-up? 200 500)
                        :headers {"Content-Type" "application/json"}
                        :body (json/write-str {:time (str (Date. (System/currentTimeMillis)))
                                               :database {:status (if db-up? "up" "down")}})}))

   "GET /things/"  (constantly {:status 200
                                :headers {"Content-Type" "application/json"}
                                :body "{\"things\": []}"})

   "GET /things/*"  (fn [req]
                      (let [[id] (:path-params req)]
                        {:status 200
                         :headers {"Content-Type" "application/json"}
                         :body (format "{\"id\": %s}" id)}))})


(defn handler
  []
  (-> (router/router routes)
      (wrap-defaults api-defaults)))


(defn dbspec
  []
  "jdbc:postgresql://fpdb.orb.local/fpex?user=fpex")


(defn -main
  [& _args]
  (reset! db-datasource (jdbc/get-datasource db-spec))
  (run-jetty (handler) {:port 3000 :join? true}))



(comment
  (reset! db-datasource (jdbc/get-datasource db-spec))

  (defonce server (atom nil))

  (reset! server (run-jetty #((handler) %) {:port 3000 :join? false}))

  (.stop @server)
)
