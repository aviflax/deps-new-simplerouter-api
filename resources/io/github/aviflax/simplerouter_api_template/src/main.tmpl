(ns {{top/ns}}.{{main/ns}}
  (:require
    [clojure.data.json :as json]
    [clojure.string :as str]
    [next.jdbc :as jdbc]
    [clj-simple-router.core :as router]
    [ring.adapter.jetty :refer [run-jetty]]
    [ring.middleware.defaults :refer [api-defaults wrap-defaults]])
  (:import
    [java.util Date])
  (:gen-class))


(defonce db-datasource (atom nil))


(defn is-db-up?
  []
  (boolean (jdbc/execute! @db-datasource ["select"])))


(def routes
  {"GET /healthz"
   (fn health-get [_req]
     (let [db-up? (is-db-up?)]
       {:status (if db-up? 200 500)
        :headers {"Content-Type" "application/json"}
        :body (json/write-str {:time (str (Date. (System/currentTimeMillis)))
                               :database {:status (if db-up? "up" "down")}})}))

   "GET /things/"
   (fn thing-get-coll [_req]
     (let [things (sql/query @db-datasource ["select * from thing"] jdbc/snake-kebab-opts)]
       {:status 200
        :headers {"Content-Type" "application/json"}
        :body (json/write-str {:things things})}))

   "GET /things/*"
   (fn thing-get-one [req]
     (let [id (some-> req :path-params first parse-long)
           thing (if (pos-int? id) (sql/get-by-id @db-datasource :thing id jdbc/snake-kebab-opts))]
       (if thing
         {:status 200
          :headers {"Content-Type" "application/json"}
          :body (json/write-str thing)}
         {:status 404
          :headers {"Content-Type" "text/plain"}
          :body "Not found."})))})


(defn handler
  []
  (-> (router/router routes)
      (wrap-defaults api-defaults)))


(defn db-spec
  []
  {:post [string? (not (str/blank? %))]}
  (get (System/getenv) "DB_URL"))


(defn -main
  [& _args]
  (reset! db-datasource (jdbc/get-datasource (db-spec)))
  (run-jetty (handler) {:port 3000 :join? true}))



(comment
  (reset! db-datasource (jdbc/get-datasource (db-spec)))
  (is-db-up?)

  (defonce server (atom nil))

  (reset! server (run-jetty #((handler) %) {:port 3000 :join? false}))

  (.stop @server)
)
